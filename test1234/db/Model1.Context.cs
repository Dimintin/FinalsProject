//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test1234.db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineCinema_dataEntities : DbContext
    {
        public OnlineCinema_dataEntities()
            : base("name=OnlineCinema_dataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<FilmCountry> FilmCountry { get; set; }
        public virtual DbSet<FilmGenre> FilmGenre { get; set; }
        public virtual DbSet<FilmLibrary> FilmLibrary { get; set; }
        public virtual DbSet<FilmProductionStaff> FilmProductionStaff { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<ProductionStaff> ProductionStaff { get; set; }
        public virtual DbSet<PromoTrailer> PromoTrailer { get; set; }
        public virtual DbSet<SeriesEpisode> SeriesEpisode { get; set; }
        public virtual DbSet<SeriesSeason> SeriesSeason { get; set; }
        public virtual DbSet<StaffRole> StaffRole { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TextReview> TextReview { get; set; }
        public virtual DbSet<UserData> UserData { get; set; }
        public virtual DbSet<UserFavorite> UserFavorite { get; set; }
        public virtual DbSet<UserView> UserView { get; set; }
        public virtual DbSet<View_FilmProduction> View_FilmProduction { get; set; }
        public virtual DbSet<View_UserItemViems> View_UserItemViems { get; set; }
        public virtual DbSet<View_UserReviews> View_UserReviews { get; set; }
    
        [DbFunction("OnlineCinema_dataEntities", "Func_GetGenreFilms")]
        public virtual IQueryable<Func_GetGenreFilms_Result> Func_GetGenreFilms(string setGenre)
        {
            var setGenreParameter = setGenre != null ?
                new ObjectParameter("SetGenre", setGenre) :
                new ObjectParameter("SetGenre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Func_GetGenreFilms_Result>("[OnlineCinema_dataEntities].[Func_GetGenreFilms](@SetGenre)", setGenreParameter);
        }
    
        [DbFunction("OnlineCinema_dataEntities", "Func_GetUserReviews")]
        public virtual IQueryable<Func_GetUserReviews_Result> Func_GetUserReviews(Nullable<int> setUserID)
        {
            var setUserIDParameter = setUserID.HasValue ?
                new ObjectParameter("SetUserID", setUserID) :
                new ObjectParameter("SetUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Func_GetUserReviews_Result>("[OnlineCinema_dataEntities].[Func_GetUserReviews](@SetUserID)", setUserIDParameter);
        }
    
        [DbFunction("OnlineCinema_dataEntities", "Func_GetUserViewHitory")]
        public virtual IQueryable<Func_GetUserViewHitory_Result> Func_GetUserViewHitory(Nullable<int> setUserID)
        {
            var setUserIDParameter = setUserID.HasValue ?
                new ObjectParameter("SetUserID", setUserID) :
                new ObjectParameter("SetUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Func_GetUserViewHitory_Result>("[OnlineCinema_dataEntities].[Func_GetUserViewHitory](@SetUserID)", setUserIDParameter);
        }
    
        [DbFunction("OnlineCinema_dataEntities", "Function_UserWatch")]
        public virtual IQueryable<Function_UserWatch_Result> Function_UserWatch(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Function_UserWatch_Result>("[OnlineCinema_dataEntities].[Function_UserWatch](@StartDate)", startDateParameter);
        }
    
        [DbFunction("OnlineCinema_dataEntities", "View_UserWatch")]
        public virtual IQueryable<View_UserWatch_Result> View_UserWatch(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<View_UserWatch_Result>("[OnlineCinema_dataEntities].[View_UserWatch](@StartDate)", startDateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
